interval1 <- Sys.time()
for(to in all_countries){
for(i in 1:nrow(df))
if(df[i,]$From.country == to)
if(!grepl(df[i,]$Year, years_when_country_in_esc[to], fixed = TRUE))
years_when_country_in_esc[to] <- paste0(years_when_country_in_esc[to], df[i,]$Year, ',')
years_when_country_in_esc[to] <- substr(years_when_country_in_esc[to],1,nchar(years_when_country_in_esc[to])-1)
}
## 5. Take only finals
df <- df[df$X.semi...final == 'f',]
df <- within(df, rm("X.semi...final"))
## 6. Remove unnecessary rows
df <- df[df$From.country != df$To.country,]
## 7. New measures: all points gotten by year [from juries + from televoters + full]
jury_points <- df %>%
filter(Jury.or.Televoting == "J") %>%
group_by(Jury.or.Televoting, Year, To.country) %>%
summarise(Jury.points.this.year = sum(Points))
tele_points <- df %>%
filter(Jury.or.Televoting == 'T') %>%
group_by(Jury.or.Televoting, Year, To.country) %>%
summarise(Tele.points.this.year = sum(Points))
df <- merge(df, jury_points, by = c("Year", "To.country"), all = TRUE)
df <- merge(df, tele_points, by = c("Year", "To.country"), all = TRUE)
df <- within(df, rm("Jury.or.Televoting", "Jury.or.Televoting.y"))
df[is.na(df)] <- 0
df$All.points.this.year <- df$Jury.points.this.year + df$Tele.points.this.year
## 8. Correct badly loaded data - Latvia 2003 instead of Lithuania 2003
df[df$Year == 2003 & df$To.country == "Lithuania",]$To.country <- "Latvia"
interval2 <- Sys.time()
## 9. New measures
### a) all points from voting to voted
### b) all points from voting to all the countries, where voted one is in the final
### c) all points to voted, when voting one takes part
### d) mean countries taking part, when voting in the game and voted is in the final
### a)
all_points_from_voting_to_voted <- df %>%
group_by(From.country, To.country) %>%
summarise(All.points.from.voting.to.voted = sum(Points))
df <- merge(df, all_points_from_voting_to_voted, by = c("From.country", "To.country"))
### b)
years_when_country_in_finals <- vector("list", length = 54)
names(years_when_country_in_finals) <- all_countries
for (country in all_countries) {
years_when_country_in_finals[country] <- ""
}
interval3 <- Sys.time()
for(to in all_countries){
for(i in 1:nrow(df))
if(df[i,]$To.country == to)
if(!grepl(df[i,]$Year, years_when_country_in_finals[to], fixed = TRUE))
years_when_country_in_finals[to] <- paste0(years_when_country_in_finals[to], df[i,]$Year, ',')
years_when_country_in_finals[to] <- substr(years_when_country_in_finals[to],1,nchar(years_when_country_in_finals[to])-1)
}
interval4 <- Sys.time()
df$All.points.from.voting.when.voted.in.final <- 0
#counter <- 0 # uncomment for testing [long time]
for (from in all_countries){
for (to in all_countries){
if(from == to)
next
counter <- counter + 1
all_points_from_voting_when_voted_in_final <- 0
for(i in 1:nrow(df))
if(from == df[i,]$From.country)
if(grepl(df[i,]$Year, years_when_country_in_finals[to], fixed = TRUE))
all_points_from_voting_when_voted_in_final <- all_points_from_voting_when_voted_in_final + df[i,]$Points
for(i in 1:nrow(df))
if(from == df[i,]$From.country)
if(to == df[i,]$To.country)
df$All.points.from.voting.when.voted.in.final[i] <- all_points_from_voting_when_voted_in_final
#if(counter == 21) # uncomment for testing [long time]
#  break # uncomment for testing [long time]
}
#if(counter == 21) # uncomment for testing [long time]
#  break # uncomment for testing [long time]
}
interval5 <- Sys.time()
### c) & d)
df$All.points.to.voted.when.voting.takes.part <- 0
df$Mean.countries.taking.part <- 0
#counter <- 0 # uncomment for testing [long time]
for (from in all_countries){
for (to in all_countries){
if(from == to)
next
counter <- counter + 1
all_points_to_voted_when_voting_takes_part <- 0
mean_countries_taking_part <- 0
for(i in 1:nrow(df))
if(to == df[i,]$To.country)
if(grepl(df[i,]$Year, years_when_country_in_esc[from], fixed = TRUE)){
all_points_to_voted_when_voting_takes_part <- all_points_to_voted_when_voting_takes_part + df[i,]$Points
if(df[i,]$Jury.or.Televoting.x == 'J')
mean_countries_taking_part <- mean_countries_taking_part + 1
}
years_when_country_in_esc_splitted <- strsplit(years_when_country_in_esc[[from]], ',')
# print(years_when_country_in_esc_splitted) # uncomment for testing
years_when_country_in_finals_splitted <- strsplit(years_when_country_in_finals[[to]], ',')
# print(years_when_country_in_finals_splitted) # uncomment for testing
how_many_contests_together <- length(intersect(years_when_country_in_esc_splitted[[1]], years_when_country_in_finals_splitted[[1]]))
# print(how_many_contests_together) # uncomment for testing
mean_countries_taking_part <- mean_countries_taking_part + how_many_contests_together
# print(paste0(from, "...", to, "...", mean_countries_taking_part, "...", how_many_contests_together)) # uncomment for testing
if(how_many_contests_together > 0)
mean_countries_taking_part <- mean_countries_taking_part / how_many_contests_together
else
mean_countries_taking_part <- -1
# print(mean_countries_taking_part) # uncomment for testing
for(i in 1:nrow(df))
if(from == df[i,]$From.country)
if(to == df[i,]$To.country){
df$All.points.to.voted.when.voting.takes.part[i] <- all_points_to_voted_when_voting_takes_part
df$Mean.countries.taking.part[i] <- mean_countries_taking_part
}
#if(counter == 21) # uncomment for testing [long time]
#  break # uncomment for testing [long time]
}
#if(counter == 21) # uncomment for testing [long time]
#  break # uncomment for testing [long time]
}
stop_time <- Sys.time()
#sample_n(df[df$From.country == 'Belgium',], 50) # uncomment for testing
#sample_n(df, 100) # uncomment for testing
#df[df$To.country == "Monaco" & df$Year == 1975,] # uncomment for testing
print(stop_time - start_time)
print(interval1 - start_time)
print(interval2 - interval1)
print(interval3 - interval2)
print(interval4 - interval3)
print(interval5 - interval4)
print(stop_time - interval5)
write.csv2(df, "points_given.csv", row.names = F)
### 10. New measure - contests together
df2 <- df
df2$Contests.when.voted.in.finals.and.voting.takes.part <- 0
for (from in all_countries){
for (to in all_countries){
if(from == to)
next
years_when_country_in_esc_splitted <- strsplit(years_when_country_in_esc[[from]], ',')
years_when_country_in_finals_splitted <- strsplit(years_when_country_in_finals[[to]], ',')
how_many_contests_together <- length(intersect(years_when_country_in_esc_splitted[[1]], years_when_country_in_finals_splitted[[1]]))
for(i in 1:nrow(df2))
if(from == df2[i,]$From.country)
if(to == df2[i,]$To.country)
df2$Contests.when.voted.in.finals.and.voting.takes.part[i] <- how_many_contests_together
}
}
sample_n(df2, 100)
sample_n(df, 100)
write.csv2(df2, "points_given.csv", row.names = F)
write.csv2(df, "points_given_without_contests_together.csv", row.names = F)
write.csv2(df2, "points_given.csv", row.names = F)
# sample_n(df2, 100) # uncomment for testing [long time]
setwd("C:\Users\koste\Studia\08\BD2\DWH-Eurovision\web_scraping\Patryk")
# sample_n(df2, 100) # uncomment for testing [long time]
setwd("C:/User/koste/Studia/08/BD2/DWH-Eurovision/web_scraping/Patryk")
getwd()
setwd("C:/Users/koste/Studia/08/BD2/DWH-Eurovision/web_scraping/Patryk")
getwd()
# sample_n(df2, 100) # uncomment for testing [long time]
write.csv2(df2, "../../data/new/points_given.csv", row.names = F)
write.csv2(df, "../../data/new/points_given_without_contests_together.csv", row.names = F)
library(dplyr)
df <- read.csv("https://query.data.world/s/mokmfaxjasujynpim4kx3nv2jy7azo", header=TRUE, stringsAsFactors=FALSE, sep = ";")
df <- df %>% select(event.year, Country.of.jury, Member.id, Gender, Date.of.birth)
colnames(df) <- c("year", "country_of_jury", "member_id", "gender", "birthdate")
#unique(df$country_of_jury)
df$country_of_jury[df$country_of_jury == "Czech-Republic"] <- "Czech Republic"
df$country_of_jury[df$country_of_jury == "Fyr-macedonia"] <- "Macedonia"
df$country_of_jury[df$country_of_jury == "United-kingdom"] <- "United Kingdom"
df$country_of_jury[df$country_of_jury == "San-marino"] <- "San Marino"
df$country_of_jury[df$country_of_jury == "Bosnia-herzegovina"] <- "Bosnia and Herzegovina"
df$whichContest = 'tbc'
whichContestsModulo = 1
whichC = {}
whichC[1] = 'sf1'
whichC[2] = 'sf2'
whichC[3] = 'f'
for(i in 1:nrow(df)){
aux <- strsplit(df$birthdate[i], "-")[[1]]
df$birthyear[i] <- aux[1]
df$birthmonth[i] <- aux[2]
df$birthday[i] <- aux[3]
if(i == 1) df$whichContest[i] = 'f'
else if(substring(df$country_of_jury[i-1], 1, 1) > substring(df$country_of_jury[i], 1, 1)){
whichContestsModulo = whichContestsModulo + 1
if (whichContestsModulo == 4)
whichContestsModulo = whichContestsModulo - 3
}
df$whichContest[i] = whichC[whichContestsModulo]
}
df$birthday <- as.integer(df$birthday)
df$birthmonth <- as.integer(df$birthmonth)
df$birthyear <- as.integer(df$birthyear)
#df
sex_count <- df %>%
filter(gender == "male") %>%
group_by(year, country_of_jury, whichContest) %>%
summarise(male_count = n())
df <- df %>% mutate(age = year - birthyear)
mean_age <- df %>%
group_by(year, country_of_jury, whichContest) %>%
summarise(mean_age = mean(age))
res <- sex_count
res$mean_age <- mean_age$mean_age
res[res$year == 2017,]
res
### take only finals
res[res$whichContest == 'f',]
### take only finals
res <- res[res$whichContest == 'f',]
res %>%
select(-whichContest)
res <- res %>%
select(-whichContest)
res$mean_age
cut(res$mean_age,c(0,5,10,15,20,25,30,35,40,45,50,60))
table(cut(res$mean_age,c(0,5,10,15,20,25,30,35,40,45,50,60)))
table(cut(res$mean_age,c(25,30,35,40,45,50,60,65)))
table(cut(res$mean_age,c(20,30,40,50,60)))
table(cut(res$mean_age,c(0,32,40,50,60)))
table(cut(res$mean_age,c(0,32, 36, 40,50,60)))
table(cut(res$mean_age,c(0,32, 37, 40, 42, 45, 50,60)))
table(cut(res$mean_age,c(18, 32, 37, 40, 42, 47, 72)))
table(cut(res$mean_age,c(18, 33, 37, 40, 42, 46, 72)))
table(cut(res$mean_age,c(18, 33, 37, 40, 43, 47, 72)))
table(cut(res$mean_age,c(18, 34, 38, 40, 43, 47, 72)))
table(cut(res$mean_age,c(18, 35, 38, 40, 43, 47, 72)))
table(cut(res$mean_age,c(18, 35, 37, 40, 43, 47, 72)))
mean(cut(res$mean_age,c(18, 35, 37, 39, 41, 47, 72)))
table(cut(res$mean_age,c(18, 35, 37, 39, 41, 47, 72)))
table(cut(res$mean_age,c(18, 36, 39, 41, 43, 46, 72)))
table(cut(res$mean_age,c(18, 36, 39, 42, 45, 48, 72)))
table(cut(res$mean_age,c(18, 36, 39, 42, 45, 50, 72)))
table(cut(res$mean_age,c(18, 35, 40, 45, 50, 72)))
table(cut(res$mean_age,c(18, 35, 39, 45, 50, 72)))
table(cut(res$mean_age,c(18, 35, 39, 44, 50, 72)))
table(cut(res$mean_age,c(18, 35, 38, 43, 50, 72)))
cut(res$mean_age,c(18, 35, 38, 43, 50, 72))
res$mean_age <- cut(res$mean_age,c(18, 35, 38, 43, 50, 72))
res
res$mean_age %>%
replace(c("(18,35]", "(35,38]", "(38,43]", "(43,50]", "(50,72]"), c("Very young", "Young", "Middle", "Old", "Very old"))
res$mean_age %>%
replace(c("Very young", "Young", "Middle", "Old", "Very old"), c("(18,35]", "(35,38]", "(38,43]", "(43,50]", "(50,72]"))
res$mean_age %>%
replace(c("(18,35]", "(35,38]", "(38,43]", "(43,50]", "(50,72]"), c("Very young", "Young", "Middle", "Old", "Very old"))
res$mean_age %>%
replace("(18,35]", "Very young")
res
res
res %>%
replace("(18,35]", "Very young")
res %>%
replace(mean_age, "(18,35]", "Very young")
old_mean_age_values <- c("(18,35]", "(35,38]", "(38,43]", "(43,50]", "(50,72]")
new_mean_age_values <- c("Very young", "Young", "Middle", "Old", "Very old")
new_mean_age_values[match(res, old_mean_age_values, nomatch = 0)]
for (i in 1:5)
res[res == old_mean_age_values[i]] <- new_mean_age_values[i]
res
for (i in 1:5)
res[res == old_mean_age_values[i]] <- new_mean_age_values[i]
for (i in 1:5)
res[res == old_mean_age_values[i]] <- as.factor(new_mean_age_values[i])
res
res[res == "(18,35]"] <- "Very young"
res[res == "(18,35]"] <- as.character("Very young")
res
res %>%
mutate(mean_age_category <- case_when(
mean_age == "(18,35]" ~ "Very young",
mean_age == "(35,38]" ~ "Young",
mean_age == "(38,43]" ~ "Middle",
mean_age == "(43,50]" ~ "Old",
mean_age == "(50,72]" ~ "Very old",
))
res %>%
mutate(mean_age_category = case_when(
mean_age == "(18,35]" ~ "Very young",
mean_age == "(35,38]" ~ "Young",
mean_age == "(38,43]" ~ "Middle",
mean_age == "(43,50]" ~ "Old",
mean_age == "(50,72]" ~ "Very old",
))
res %>%
mutate(mean_age_category = case_when(
mean_age == "(18,35]" ~ "Very young",
mean_age == "(35,38]" ~ "Young",
mean_age == "(38,43]" ~ "Middle",
mean_age == "(43,50]" ~ "Old",
mean_age == "(50,72]" ~ "Very old",
)) %>%
select(-mean_age)
res <- res %>%
mutate(mean_age_category = case_when(
mean_age == "(18,35]" ~ "Very young",
mean_age == "(35,38]" ~ "Young",
mean_age == "(38,43]" ~ "Middle",
mean_age == "(43,50]" ~ "Old",
mean_age == "(50,72]" ~ "Very old",
)) %>%
select(-mean_age)
res
### change column names
columns(res) <- c("Year", "Country.of.jury", "Male.count", "Mean.age.category")
### change column names
colnames(res) <- c("Year", "Country.of.jury", "Male.count", "Mean.age.category")
res
write.csv2(res, "../../data/new/jury.csv", row.names = F)
getwd()
setwd("C:/Users/koste/Studia/08/BD2/DWH-Eurovision/extra_scripts")
getwd()
df <- read.csv("../data/original/contestants.csv")
df
df %>%
select(-to_country, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf)
df %>%
select(-to_country, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf)
df %>%
select(-to_country, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url)
df %>%
select(-c(to_country, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
df %>%
select(-c(to_country, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url)) %>%
head(10)
df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url)) %>%
head(10)
df <- df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
data.frame(names=temp$name,chr=apply(temp,2,nchar)[,2])
data.frame(names=df$lyrics,chr=apply(df,2,nchar)[,2])
str_length(df$lyrics)
library(stringr)
## 3. Lyrics to its length
df$lyrics = str_length(df$lyrics)
df
## 4. Length to categories
table(cut(df$lyrics, c(0, 200, 500, 1000, 1500, 10000)))
## 4. Length to categories
table(cut(df$lyrics, c(0, 500, 1000, 1500, 10000)))
## 4. Length to categories
table(cut(df$lyrics, c(0, 750, 1000, 1500, 10000)))
## 4. Length to categories
table(cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000)))
df %>%
mutate(lyrics_length_category = case_when(
lyrics == "(0,750]" ~ "Very short",
lyrics == "(750,1e+03]" ~ "Short",
lyrics == "(1e+03,1.25e+03]" ~ "Middle",
lyrics == "(1.25e+03,1.5e+03]" ~ "Long",
lyrics == "(1.5e+03,1e+04]" ~ "Very long",
)) %>%
select(-lyrics)
df
df$lyrics <- table(cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000)))
## 4. Length to categories
df$lyrics <- cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000))
df
df %>%
mutate(lyrics_length_category = case_when(
lyrics == "(0,750]" ~ "Very short",
lyrics == "(750,1e+03]" ~ "Short",
lyrics == "(1e+03,1.25e+03]" ~ "Middle",
lyrics == "(1.25e+03,1.5e+03]" ~ "Long",
lyrics == "(1.5e+03,1e+04]" ~ "Very long",
)) %>%
select(-lyrics)
df <- df %>%
mutate(lyrics_length_category = case_when(
lyrics == "(0,750]" ~ "Very short",
lyrics == "(750,1e+03]" ~ "Short",
lyrics == "(1e+03,1.25e+03]" ~ "Middle",
lyrics == "(1.25e+03,1.5e+03]" ~ "Long",
lyrics == "(1.5e+03,1e+04]" ~ "Very long",
)) %>%
select(-lyrics)
colnames(df)
colnames(df) <- c("Year", "Country", "Performer", "Song", "Composers", "Lyricists", "Lyrics.length.category")
df
## 1. Libraries & data load
library(dplyr)
library(stringr)
df <- read.csv("../data/original/contestants.csv")
## 2. Remove redundant
df <- df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
## 3. Lyrics to its length
df$lyrics = str_length(df$lyrics)
## 4. Length to categories
df$lyrics <- cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000))
df <- df %>%
mutate(lyrics_length_category = case_when(
lyrics == "(0,750]" ~ "Very short",
lyrics == "(750,1e+03]" ~ "Short",
lyrics == "(1e+03,1.25e+03]" ~ "Middle",
lyrics == "(1.25e+03,1.5e+03]" ~ "Long",
lyrics == "(1.5e+03,1e+04]" ~ "Very long",
)) %>%
select(-lyrics)
colnames(df) <- c("Year", "Country", "Performer", "Song", "Composers", "Lyricists", "Lyrics.length.category")
write.csv2(df, "../../data/new/contestants.csv", row.names = F)
## 1. Libraries & data load
library(dplyr)
library(stringr)
df <- read.csv("../data/original/contestants.csv")
## 2. Remove redundant
df <- df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
## 3. Lyrics to its length
df$lyrics = str_length(df$lyrics)
## 4. Length to categories
df$lyrics <- cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000))
df <- df %>%
mutate(lyrics_length_category = case_when(
lyrics == "(0,750]" ~ "Very short",
lyrics == "(750,1e+03]" ~ "Short",
lyrics == "(1e+03,1.25e+03]" ~ "Middle",
lyrics == "(1.25e+03,1.5e+03]" ~ "Long",
lyrics == "(1.5e+03,1e+04]" ~ "Very long",
)) %>%
select(-lyrics)
colnames(df) <- c("Year", "Country", "Performer", "Song", "Composers", "Lyricists", "Lyrics.length.category")
write.csv2(df, "../data/new/contestants.csv", row.names = F)
table(cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000)))
## 1. Libraries & data load
library(dplyr)
library(stringr)
df <- read.csv("../data/original/contestants.csv")
## 2. Remove redundant
df <- df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
## 3. Lyrics to its length
df$lyrics = str_length(df$lyrics)
## 4. Length to categories
df$lyrics <- table(cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000)))
table(cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000)))
## 1. Libraries & data load
library(dplyr)
library(stringr)
df <- read.csv("../data/original/contestants.csv")
## 2. Remove redundant
df <- df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
## 3. Lyrics to its length
df$lyrics = str_length(df$lyrics)
## 4. Length to categories
df$lyrics <- cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000))
df <- df %>%
mutate(lyrics_length_category = case_when(
lyrics == "(0,750]" ~ "Very short",
lyrics == "(750,1e+03]" ~ "Short",
lyrics == "(1e+03,1.25e+03]" ~ "Middle",
lyrics == "(1.25e+03,1.5e+03]" ~ "Long",
lyrics == "(1.5e+03,1e+04]" ~ "Very long",
)) %>%
select(-lyrics)
colnames(df) <- c("Year", "Country", "Performer", "Song", "Composers", "Lyricists", "Lyrics.length.category")
write.csv2(df, "../data/new/contestants.csv", row.names = F)
## 1. Libraries & data load
library(dplyr)
library(stringr)
df <- read.csv("../data/original/contestants.csv")
## 2. Remove redundant
df <- df %>%
select(-c(to_country_id, place_contest, sf_num, running_final, running_sf, place_final,
points_final, place_sf, points_sf, points_tele_final, points_jury_final,
points_tele_sf, points_jury_sf, youtube_url))
## 3. Lyrics to its length
df$lyrics = str_length(df$lyrics)
## 4. Length to categories
df$lyrics <- cut(df$lyrics, c(0, 750, 1000, 1250, 1500, 10000))
df <- df %>%
mutate(lyrics_length_category = case_when(
lyrics == "(0,750]" ~ "Very short",
lyrics == "(750,1e+03]" ~ "Short",
lyrics == "(1e+03,1.25e+03]" ~ "Middle",
lyrics == "(1.25e+03,1.5e+03]" ~ "Long",
lyrics == "(1.5e+03,1e+04]" ~ "Very long",
)) %>%
select(-lyrics)
colnames(df) <- c("Year", "Country", "Performer", "Song", "Composers", "Lyricists", "Lyrics.length.category")
write.csv2(df, "../data/new/contestants.csv", row.names = F)
